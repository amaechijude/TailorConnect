"""
Django settings for TailorConnect project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
import ssl
# from datetime import timedelta
# from typing import cast
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-5%&98mrff3s=wk^ee9#u^es@w0n1ylz4_r3bc69zzzzg=25hcf'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #gunicorn
    'gunicorn',
    #custom app
    'authUser',
    'coreapp',
    'creators',
    'payment',

    #rest framework
    'rest_framework',
    # 'rest_framework_simplejwt',

    # for azure storage
    'storages',
    #celery result
    'django_redis',
    'django_celery_results',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # Add the account middleware:
    # "allauth.account.middleware.AccountMiddleware"
]

ROOT_URLCONF = 'TailorConnect.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'),],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'TailorConnect.wsgi.application'

# SECURE_SSL_REDIRECT = True
# CSRF_COOKIE_SECURE = True
# SESSION_COOKIE_SECURE = True
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')


# Database
    # https://docs.djangoproject.com/en/5.0/ref/settings/#database

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
# else:
#     DATABASES = {
#             'default': {
#             'ENGINE': config('DATABASE_ENGINE'),
#             'NAME': config('DATABASE_NAME'),
#             'USER': config('DATABASE_USER'),
#             'PASSWORD': config('DATABASE_PASSWORD'),
#             'HOST': config('DATABASE_HOST'),
#             'PORT': config('DATABASE_PORT', cast=int)
#             }
#         }

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

MEDIA_URL = 'media/'

if DEBUG:
    MEDIA_ROOT = os.path.join(BASE_DIR, "tmedia")
else:
    # Azure storage settings for production
    AZURE_ACCOUNT_NAME = config('AZURE_ACCOUNT_NAME')  # Azure Storage account name
    AZURE_ACCOUNT_KEY = config('AZURE_ACCOUNT_KEY')    # Azure Storage account key
    AZURE_STATIC_CONTAINER = config('AZURE_STATIC_CONTAINER')  # Container for static files
    AZURE_MEDIA_CONTAINER = config('AZURE_MEDIA_CONTAINER')    # Container for media files

    STORAGES = {
        "default": {  # For media files
            "BACKEND": "storages.backends.azure_storage.AzureStorage",
            "OPTIONS": {
                "account_name": AZURE_ACCOUNT_NAME,
                "account_key": AZURE_ACCOUNT_KEY,
                "azure_container": AZURE_MEDIA_CONTAINER,
            },
        },
        "staticfiles": {  # For static files
            "BACKEND": "storages.backends.azure_storage.AzureStorage",
            "OPTIONS": {
                "account_name": AZURE_ACCOUNT_NAME,
                "account_key": AZURE_ACCOUNT_KEY,
                "azure_container": AZURE_STATIC_CONTAINER,
            },
        }
    }

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User model
AUTH_USER_MODEL = 'authUser.User'

#### REDIS CACHE BACKEND ########
redis_location = "redis://127.0.0.1:6379"
CACHES = {
"default": {
    "BACKEND": "django.core.cache.backends.redis.RedisCache",
    "LOCATION": redis_location #'redis://redis:6379/',
    }
}
# CELERY CONFIG
CELERY_BROKER_URL = redis_location #'redis://redis:6379/0'
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_RESULT_BACKEND = redis_location #'redis://redis:6379/1'


# Paystack Configurations
PAYSTACK_SECRET_KEY = config('PAYSTACK_SECRET_KEY')
PAYSTACK_PUBLIC_KEY = config('PAYSTACK_PUBLIC_KEY')

#ErcasPay Configuration
ERCASPAY_API_KEY = config('ERCASPAY_API_KEY')
ERCASPAY_SECRET_KEY = config('ERCASPAY_SECRET_KEY')

# Email config
EMAIL_BACKEND = config('EMAIL_BACKEND')
EMAIL_HOST = config('EMAIL_HOST')
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
EMAIL_PORT = config('EMAIL_PORT', cast=int)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', cast=bool)

########### Rest Framework #########
# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': [
#         'rest_framework_simplejwt.authentication.JWTAuthentication',
#     ],

# }
# SIMPLE_JWT = {
#     'ACCESS_TOKEN_LIFETIME': timedelta(minutes=90),
#     'REFRESH_tOKEN_LIFETIME': timedelta(days=1),
#     'ROTATE_REFRESH_TOKEN': False,
#     'BLACKLIST_AFTER_ROTATION': True,

#     'USER_ID_FIELD': 'userId'
# }

# Allauth config
# AUTHENTICATION_BACKENDS = [

#     # Needed to login by username in Django admin, regardless of `allauth`
#     'django.contrib.auth.backends.ModelBackend',

#     # `allauth` specific authentication methods, such as login by email
#     'allauth.account.auth_backends.AuthenticationBackend',

# ]

# SITE_ID = 1
# ACCOUNT_LOGOUT_ON_GET = True
# LOGIN_REDIRECT_URL = "/"
# LOGIN_TEMPLATE = "/login"
# ACCOUNT_AUTHENTICATION_METHOD = 'email'
# ACCOUNT_EMAIL_REQUIRED = True
# ACCOUNT_USERNAME_REQUIRED = False
# ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = True
# ACCOUNT_LOGOUT_REDIRECT_URL = "/login"


